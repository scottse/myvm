#!/usr/bin/env bash

################################################################################
# myvm is a script designed to either create a quick VM or a custom VM from
# cloud VM images from Debian, Ubuntu, Alpine, Centos, Fedora, and OpenSUSE.
# 
# Requirements:
# The script needs virt-install and cloud-localds packages to be installed.
# 
################################################################################
# Change Log:
# 2023/10/08 - Minor updates, removing settings from testing.
# 2023/12/29 - Removed test image download links.
# 2024/02/22 - Updated Fedora image link to Fedora 39.
#              Removed version numbers from comments for download links.
#              Updated renamed cloud image file names.
# 2024/03/02 - Added help section, updated cloud-init variable.
# 2024/08/01 - Removed the quick VM option from the script
#              Added Alpine Linux
#              Updated function names
# 2024/11/14 - Updated help section and updated cloud image download URLs.
################################################################################

# Username and hashed password for VMs.
LV_CONN=''
USERNAME=''
# Use either openssl or mkpasswd to create a hashed password. e.g. openssl passwd -6 or mkpasswd -m sha-512.
PASSWORD=''
# SSH Public key
SSH_PUB_KEY=''
# Network used by custom VMs.
VM_NETWORK=''
# Libvirt VM images storage
LV_IMG='/var/lib/libvirt/images'
# Where the cloud-init config iso is stored.
LV_CLDINIT_ISO='/var/lib/libvirt/cloud-init-iso'
# Where the Linux cloud images are stored.
LV_CLD_IMG='/var/lib/libvirt/cloud-images'
# Where the cloud-init config files are stored.
LV_CLD_INIT='/var/lib/libvirt/cloud-init'
# Alpine download link
ALPINE_CLD_IMG='https://dl-cdn.alpinelinux.org/alpine/v3.20/releases/cloud/nocloud_alpine-3.20.2-x86_64-bios-cloudinit-r0.qcow2'
# Ubuntu download link
UBUNTU_CLD_IMG='https://cloud-images.ubuntu.com/noble/current/noble-server-cloudimg-amd64.img'
# Debian download link
DEBIAN_CLD_IMG='https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-generic-amd64.qcow2'
# Fedora download link
FEDORA_CLD_IMG='https://fedora.mirror.constant.com/fedora/linux/releases/41/Cloud/x86_64/images/Fedora-Cloud-Base-Generic-41-1.4.x86_64.qcow2'
# CentOS Stream download link
CENTOS_CLD_IMG='https://cloud.centos.org/centos/9-stream/x86_64/images/CentOS-Stream-GenericCloud-9-latest.x86_64.qcow2'
# OpenSuse Leap download link
OPENSUSE_CLD_IMG="https://download.opensuse.org/repositories/Cloud:/Images:/Leap_15.6/images/openSUSE-Leap-15.6.x86_64-NoCloud.qcow2"
# Alpine File Name
ALPINE_FNAME='alpine-cldimg.qcow2'
# Ubuntu File Name
UBUNTU_FNAME='ubuntu-cldimg.qcow2'
# Debian File Name
DEBIAN_FNAME='debian-cldimg.qcow2'
# Fedora File Name
FEDORA_FNAME='fedora-cldimg.qcow2'
# CentOS File Name
CENTOS_FNAME='centos-cldimg.qcow2'
# OpenSUSE File Name
OPENSUSE_FNAME='openSUSE-Leap-cldimg.qcow2'

d_alpine_img() {
    if [ -e $LV_CLD_IMG/$ALPINE_FNAME ]; then
      echo "Found $(echo $ALPINE_FNAME) in the libvirt images directory."
      # Return to main menu.
      menu
    else
      wget -O $LV_CLD_IMG/$ALPINE_FNAME $ALPINE_CLD_IMG
      echo "Downloading $(echo $ALPINE_FNAME) into the libvirt images directory."
      # Return to main menu
      menu
    fi
}

d_ubuntu_img() {
    if [ -e $LV_CLD_IMG/$UBUNTU_FNAME ]; then
      echo "Found $(echo $UBUNTU_FNAME) in the libvirt images directory."
      # Return to main menu.
      menu
    else
      wget -O $LV_CLD_IMG/$UBUNTU_FNAME $UBUNTU_CLD_IMG
      # qemu-img convert -f qcow2 -O qcow2 $LV_IMG/$UBUNTU_FNAME_IMG $LV_IMG/$UBUNTU_FNAME
      echo "Downloading $(echo $UBUNTU_FNAME) into the libvirt images directory."
      # Return to main menu
      menu
    fi
}

d_debian_img() {
    if [ -e $LV_CLD_IMG/$DEBIAN_FNAME ]; then
      echo "Found $(echo $DEBIAN_FNAME) in the libvirt images directory."
      # Return to main menu.
      menu
    else
      wget -O $LV_CLD_IMG/$DEBIAN_FNAME $DEBIAN_CLD_IMG
      echo "Downloading $(echo $DEBIAN_FNAME) into the libvirt images directory."
      #Return to main menu.
      menu
    fi
}

d_fedora_img() {
    if [ -e $LV_CLD_IMG/$FEDORA_FNAME ]; then
      echo "Found $(echo $FEDORA_FNAME) in the libvirt images directory."
      # Return to main menu.
      menu
    else
      wget -O $LV_CLD_IMG/$FEDORA_FNAME $FEDORA_CLD_IMG
      echo "Downloading $(echo $FEDORA_FNAME) into the libvirt images directory."
      # Return to main menu
      menu
    fi
}

d_centos_img() {
    if [ -e $LV_CLD_IMG/$CENTOS_FNAME ]; then
      echo "Found $(echo $CENTOS_FNAME) in the libvirt images directory."
      # Return to main menu.
      menu
    else
      wget -O $LV_CLD_IMG/$CENTOS_FNAME $CENTOS_CLD_IMG
      echo "Downloading $(echo $CENTOS_FNAME) into the libvirt images directory."
      # Return to main menu
      menu
    fi
}

d_opensuse_img() {
    if [ -e $LV_CLD_IMG/$OPENSUSE_FNAME ]; then
      echo "Found $(echo $OPENSUSE_FNAME) in the libvirt images directory."
      # Return to main menu.
      menu
    else
      wget -O $LV_CLD_IMG/$OPENSUSE_FNAME $OPENSUSE_CLD_IMG
      echo "Downloading $(echo $OPENSUSE_FNAME) into the libvirt images directory."
      # Return to main menu
      menu
    fi
}

ubuntu_vm() {
    # Asking user for specific parameters for the custom VM.
  while :; do
    read -p "VM name? " ubuntu_vm_name
    if [ -e $LV_IMG/$ubuntu_vm_name.qcow2 ]; then
      echo "The VM name $ubuntu_vm_name already exists. Please choose a new name."
    else
      break
    fi
  done
  read -p "VM disk size (in GB)? " ubuntu_disk_size
  read -p "How many vCPUs? " ubuntu_vcpus
  read -p "How much memory (in MB)? " ubuntu_memory
  
  # Create cloud-init directory.
  echo "Creating a cloud-init directory for $ubuntu_vm_name."
  mkdir $LV_CLD_INIT/$ubuntu_vm_name

  # Create user-data file.
  cat > $LV_CLD_INIT/$ubuntu_vm_name/cloud-init.cfg << EOF
#cloud-config
system_info:
  default_user:
    name: $USERNAME
    home: /home/$USERNAME
    ssh_authorized_keys:
      - $SSH_PUB_KEY
    sudo: ALL=(ALL) ALL
    groups: sudo

password: $PASSWORD
chpasswd: { expire: False }
hostname: $ubuntu_vm_name
ssh_pwauth: True
EOF

  # Creates the cloud-init.iso file.
  echo "Creating the cloud-init iso file."
  cloud-localds $LV_CLDINIT_ISO/$ubuntu_vm_name.iso \
  $LV_CLD_INIT/$ubuntu_vm_name/cloud-init.cfg

  # Copy the cloud image and rename it to the VM name.
  echo "Copying $ubuntu_vm_name.qcow2 from cloud image file."
  cp $LV_CLD_IMG/$UBUNTU_FNAME $LV_IMG/$ubuntu_vm_name.qcow2
  
  # Resize VM disk size.
  echo "Resizing VM disk space to $ubuntu_disk_size."
  qemu-img resize $LV_IMG/$ubuntu_vm_name.qcow2 $ubuntu_disk_size

  # Run the virt-install command to create the new VM.
  virt-install \
    --connect qemu:///system \
    --name $ubuntu_vm_name \
    --memory $ubuntu_memory \
    --vcpus=$ubuntu_vcpus \
    --disk $LV_IMG/$ubuntu_vm_name.qcow2,device=disk,bus=sata \
    --disk $LV_CLDINIT_ISO/$ubuntu_vm_name.iso,device=cdrom \
    --os-variant=ubuntu-lts-latest \
    --virt-type kvm \
    --graphics vnc \
    --network network=$VM_NETWORK,model=virtio \
    --import \
    --noautoconsole

  # Return user back to main menu
  menu
}

debian_vm() {
  # Asking user for specific parameters for the custom VM.
  while :; do
    read -p "VM name? " debian_vm_name
    if [ -e $LV_IMG/$debian_vm_name.qcow2 ]; then
      echo "The VM name $debian_vm_name already exists. Please choose a new name."
    else
      break
    fi
  done
  read -p "VM disk size (in GB)? " debian_disk_size
  read -p "How many vCPUs? " debian_vcpus
  read -p "How much memory (in MB)? " debian_memory
 
  # Create cloud-init directory.
  echo "Creating a cloud-init directory for $debian_vm_name."
  mkdir $LV_CLD_INIT/$debian_vm_name

  # Create the cloud-init.cfg file.
  echo "Creating the cloud-init iso file."
  cat > $LV_CLD_INIT/$debian_vm_name/cloud-init.cfg << EOF
#cloud-config
system_info:
  default_user:
    name: $USERNAME
    home: /home/$USERNAME
    ssh_authorized_keys:
      - $SSH_PUB_KEY
    sudo: ALL=(ALL) ALL
    groups: sudo

password: $PASSWORD
chpasswd: { expire: False }
hostname: $debian_vm_name
ssh_pwauth: True
EOF

  # Creates the cloud-init.iso file.
  cloud-localds $LV_CLDINIT_ISO/$debian_vm_name.iso \
  $LV_CLD_INIT/$debian_vm_name/cloud-init.cfg

  # Copy the cloud image and rename it to the VM name.
  echo "Copying $debian_vm_name.qcow2 from cloud image file."
  cp $LV_CLD_IMG/$DEBIAN_FNAME $LV_IMG/$debian_vm_name.qcow2
  
  # Resize VM disk size.
  echo "Resizing VM disk space to $debian_disk_size."
  qemu-img resize $LV_IMG/$debian_vm_name.qcow2 $debian_disk_size

  # Run the virt-install command to create the new VM.
  virt-install \
    --connect qemu:///system \
    --name $debian_vm_name \
    --memory $debian_memory \
    --vcpus=$debian_vcpus \
    --disk $LV_IMG/$debian_vm_name.qcow2,device=disk,bus=sata \
    --disk $LV_CLDINIT_ISO/$debian_vm_name.iso,device=cdrom \
    --os-variant=debian12 \
    --virt-type kvm \
    --graphics vnc \
    --network network=$VM_NETWORK,model=virtio \
    --import \
    --noautoconsole
  # Return user back to main menu
  menu
}

alpine_vm() {
    # Asking user for specific parameters for the custom VM.
  while :; do
    read -p "VM name? " alpine_vm_name
    if [ -e $LV_IMG/$alpine_vm_name.qcow2 ]; then
      echo "The VM name $alpine_vm_name already exists. Please choose a new name."
    else
      break
    fi
  done
  read -p "VM disk size (in GB)? " alpine_disk_size
  read -p "How many vCPUs? " alpine_vcpus
  read -p "How much memory (in MB)? " alpine_memory
  
  # Create cloud-init directory.
  echo "Creating a cloud-init directory for $alpine_vm_name."
  mkdir $LV_CLD_INIT/$alpine_vm_name

  # Create user-data file.
  cat > $LV_CLD_INIT/$alpine_vm_name/cloud-init.cfg << EOF
#cloud-config
system_info:
  default_user:
    name: $USERNAME
    home: /home/$USERNAME
    ssh_authorized_keys:
      - $SSH_PUB_KEY
    sudo: ALL=(ALL) ALL
    groups: sudo

password: $PASSWORD
chpasswd: { expire: False }
hostname: $alpine_vm_name
ssh_pwauth: True
EOF

  # Creates the cloud-init.iso file.
  echo "Creating the cloud-init iso file."
  cloud-localds $LV_CLDINIT_ISO/$alpine_vm_name.iso \
  $LV_CLD_INIT/$alpine_vm_name/cloud-init.cfg

  # Copy the cloud image and rename it to the VM name.
  echo "Copying $alpine_vm_name.qcow2 from cloud image file."
  cp $LV_CLD_IMG/$ALPINE_FNAME $LV_IMG/$alpine_vm_name.qcow2
  
  # Resize VM disk size.
  echo "Resizing VM disk space to $alpine_disk_size."
  qemu-img resize $LV_IMG/$alpine_vm_name.qcow2 $alpine_disk_size

  # Run the virt-install command to create the new VM.
  virt-install \
    --connect qemu:///system \
    --name $alpine_vm_name \
    --memory $alpine_memory \
    --vcpus=$alpine_vcpus \
    --disk $LV_IMG/$alpine_vm_name.qcow2,device=disk,bus=sata \
    --disk $LV_CLDINIT_ISO/$alpine_vm_name.iso,device=cdrom \
    --os-variant=alpinelinux3.19 \
    --virt-type kvm \
    --graphics vnc \
    --network network=$VM_NETWORK,model=virtio \
    --import \
    --noautoconsole

  # Return user back to main menu
  menu
}

fedora_vm() {
  # Asking user for specific parameters for the custom VM.
  while :; do
    read -p "VM name? " fedora_vm_name
    if [ -e $LV_IMG/$fedora_vm_name.qcow2 ]; then
      echo "The VM name $fedora_vm_name already exists. Please choose a new name."
    else
      break
    fi
  done
  read -p "VM disk size (in GB)? " fedora_disk_size
  read -p "How many vCPUs? " fedora_vcpus
  read -p "How much memory (in MB)? " fedora_memory

  # Create cloud-init directory.
  echo "Creating a cloud-init directory for $fedora_vm_name."
  mkdir $LV_CLD_INIT/$fedora_vm_name

  # Create meta-data file.
  cat > $LV_CLD_INIT/$fedora_vm_name/meta-data.cfg << EOF
#cloud-config
local-hostname: $fedora_vm_name
EOF
  # Create user-data file.
  cat > $LV_CLD_INIT/$fedora_vm_name/cloud-init.cfg << EOF
#cloud-config
system_info:
  default_user:
    name: $USERNAME
    home: /home/$USERNAME
    ssh_authorized_keys:
      - $SSH_PUB_KEY
    sudo: ALL=(ALL) ALL
    groups: sudo

password: $PASSWORD
chpasswd: { expire: False }
ssh_pwauth: True
EOF

  # Creates the cloud-init.iso file.
  echo "Creating the cloud-init iso file."
  cloud-localds $LV_CLDINIT_ISO/$fedora_vm_name.iso \
  $LV_CLD_INIT/$fedora_vm_name/cloud-init.cfg $LV_CLD_INIT/$fedora_vm_name/meta-data.cfg

  # Copy the cloud image and rename it to the VM name.
  echo "Copying $fedora_vm_name.qcow2 from cloud image file."
  cp $LV_CLD_IMG/$FEDORA_FNAME $LV_IMG/$fedora_vm_name.qcow2
  
  # Resize VM disk size.
  echo "Resizing VM disk space to $fedora_disk_size."
  qemu-img resize $LV_IMG/$fedora_vm_name.qcow2 $fedora_disk_size

  # Run the virt-install command to create the new VM.
  virt-install \
    --connect qemu:///system \
    --name $fedora_vm_name \
    --memory $fedora_memory \
    --vcpus=$fedora_vcpus \
    --disk $LV_IMG/$fedora_vm_name.qcow2,device=disk,bus=sata \
    --disk $LV_CLDINIT_ISO/$fedora_vm_name.iso,device=cdrom \
    --os-variant=fedora38 \
    --virt-type kvm \
    --graphics vnc \
    --network network=$VM_NETWORK,model=virtio \
    --import \
    --noautoconsole

  # Return user back to main menu
  menu
}

centos_vm() {
  # Asking user for specific parameters for the custom VM.
  while :; do
    read -p "VM name? " centos_vm_name
    if [ -e $LV_IMG/$centos_vm_name.qcow2 ]; then
      echo "The VM name $centos_vm_name already exists. Please choose a new name."
    else
      break
    fi
  done
  read -p "VM disk size (in GB)? " centos_disk_size
  read -p "How many vCPUs? " centos_vcpus
  read -p "How much memory (in MB)? " centos_memory

  # Create cloud-init directory.
  echo "Creating a cloud-init directory for $centos_vm_name."
  mkdir $LV_CLD_INIT/$centos_vm_name

  # Create meta-data file.
  cat > $LV_CLD_INIT/$centos_vm_name/meta-data.cfg << EOF
#cloud-config
local-hostname: $centos_vm_name
EOF
  # Create user-data file.
  cat > $LV_CLD_INIT/$centos_vm_name/cloud-init.cfg << EOF
#cloud-config
system_info:
  default_user:
    name: $USERNAME
    home: /home/$USERNAME
    ssh_authorized_keys:
      - $SSH_PUB_KEY
    sudo: ALL=(ALL) ALL
    groups: sudo

password: $PASSWORD
chpasswd: { expire: False }
ssh_pwauth: True
EOF

  # Creates the cloud-init.iso file.
  echo "Creating the cloud-init iso file."
  cloud-localds $LV_CLDINIT_ISO/$centos_vm_name.iso \
  $LV_CLD_INIT/$centos_vm_name/cloud-init.cfg $LV_CLD_INIT/$centos_vm_name/meta-data.cfg

  # Copy the cloud image and rename it to the VM name.
  echo "Copying $centos_vm_name.qcow2 from cloud image file."
  cp $LV_CLD_IMG/$CENTOS_FNAME $LV_IMG/$centos_vm_name.qcow2
  
  # Resize VM disk size.
  echo "Resizing VM disk space to $centos_disk_size."
  qemu-img resize $LV_IMG/$centos_vm_name.qcow2 $centos_disk_size

  # Run the virt-install command to create the new VM.
  virt-install \
    --connect qemu:///system \
    --name $centos_vm_name \
    --memory $centos_memory \
    --vcpus=$centos_vcpus \
    --disk $LV_IMG/$centos_vm_name.qcow2,device=disk,bus=sata \
    --disk $LV_CLDINIT_ISO/$centos_vm_name.iso,device=cdrom \
    --os-variant=centos-stream9 \
    --virt-type kvm \
    --graphics vnc \
    --network network=$VM_NETWORK,model=virtio \
    --import \
    --noautoconsole

  # Return user back to main menu
  menu
}

opensuse_vm() {
  # Asking user for specific parameters for the custom VM.
  while :; do
    read -p "VM name? " opensuse_vm_name
    if [ -e $LV_IMG/$opensuse_vm_name.qcow2 ]; then
      echo "The VM name $opensuse_vm_name already exists. Please choose a new name."
    else
      break
    fi
  done
  read -p "VM disk size (in GB)? " opensuse_disk_size
  read -p "How many vCPUs? " opensuse_vcpus
  read -p "How much memory (in MB)? " opensuse_memory

  # Create cloud-init directory.
  echo "Creating a cloud-init directory for $opensuse_vm_name."
  mkdir $LV_CLD_INIT/$opensuse_vm_name

  # Create meta-data file.
  cat > $LV_CLD_INIT/$opensuse_vm_name/meta-data.cfg << EOF
#cloud-config
local-hostname: $opensuse_vm_name
EOF
  # Create user-data file.
  cat > $LV_CLD_INIT/$opensuse_vm_name/cloud-init.cfg << EOF
#cloud-config
system_info:
  default_user:
    name: $USERNAME
    home: /home/$USERNAME
    ssh_authorized_keys:
      - $SSH_PUB_KEY
    sudo: ALL=(ALL) ALL
    groups: sudo

password: $PASSWORD
chpasswd: { expire: False }
ssh_pwauth: True
EOF

  # Creates the cloud-init.iso file.
  echo "Creating the cloud-init iso file."
  cloud-localds $LV_CLDINIT_ISO/$opensuse_vm_name.iso \
  $LV_CLD_INIT/$opensuse_vm_name/cloud-init.cfg $LV_CLD_INIT/$opensuse_vm_name/meta-data.cfg

  # Copy the cloud image and rename it to the VM name.
  echo "Copying $opensuse_vm_name.qcow2 from cloud image file."
  cp $LV_CLD_IMG/$OPENSUSE_FNAME $LV_IMG/$opensuse_vm_name.qcow2
  
  # Resize VM disk size.
  echo "Resizing VM disk space to $opensuse_disk_size."
  qemu-img resize $LV_IMG/$opensuse_vm_name.qcow2 $opensuse_disk_size

  # Run the virt-install command to create the new VM.
  virt-install \
    --connect qemu:///system \
    --name $opensuse_vm_name \
    --memory $opensuse_memory \
    --vcpus=$centos_vcpus \
    --disk $LV_IMG/$opensuse_vm_name.qcow2,device=disk,bus=sata \
    --disk $LV_CLDINIT_ISO/$opensuse_vm_name.iso,device=cdrom \
    --os-variant=opensuse15.4 \
    --virt-type kvm \
    --graphics vnc \
    --network network=$VM_NETWORK,model=virtio \
    --import \
    --noautoconsole


  # Return user back to main menu
  menu
}

download() {
  echo " ==Download Options== "
  echo 
  echo " The cloud image needs to be downloaded before a VM "
  echo " can be created. Please download the cloud image    "
  echo " for either Debian, Ubuntu, Fedora or download all  "
  echo " of the cloud images from each distro.              "
  echo
  local PS3="Please select an option: "
  local options=("Ubuntu" "Debian" "Alpine" "Fedora" "CentOS" "openSUSE" "Main Menu")
  local opt
  select opt in "${options[@]}"; do
    case $opt in
      "Ubuntu")
        d_ubuntu_img ;;
      "Debian")
        d_debian_img ;;
      "Alpine")
        d_alpine_img ;;
      "Fedora")
        d_fedora_img ;;
      "CentOS")
        d_centos_img ;;
      "openSUSE")
        d_opensuse_img
        ;;
      "Main Menu")
       echo "Return to main menu"
       menu
       ;;
      *) echo "Invalid option, please try again." ;;
    esac
  done
}

help() {

echo "The myvm script is used for creating a quick VM using cloud-based images from distros like Ubuntu, Fedora, CentOS, Debian, Alpine and OpenSuSE. "

echo "The setup: "
echo "1) Install virt-install and cloud-localds. Please refer to your distro package manager for the specific package name"
echo "2) Create the directories - There are four variables LV_CLD_INIT, LV_CLD_IMG, "
echo "   LV_CLDINIT_ISO and LV_IMG which store cloud-init files, cloud images, isos, and the VM qcow2 files. "
echo "   - LV_IMG - The directory Stores the VM qcow2 files. "
echo "   - LV_CLD_INIT - This directory stores the cloud-init files. "
echo "   - LV_CLD_IMG - This directory stores the download Linux cloud images. "
echo "   - LV_CLDINIT_ISO - This directory stores the cloud-init iso made by cloud-localds. "
echo "3) Provide the username and password in the USERNAME and PASSWORD variable. Use commands like mkpasswd or openssl to "
echo "   create a hashed password. "
echo "4) Generate a ssh-key pair and put the pubkey inside of the SSH_PUB_KEY variable. "
echo "5) Networking - The VM_NETWORK variable is where the name of the network the VM will connect to, like br0 or default."
}

menu() {
  echo
  echo " The myvm bash script is able to download cloud images from "
  echo " Debian, Fedora, and Ubuntu, utilizing Cloud-init to provide "
  echo " hostname, username, password, etc... to the VM. "
  echo
  echo " Please select an option below to get started "
  echo 
  PS3='Select an option: '
  options=("Download" "Ubuntu" "Debian" "Alpine" "Fedora" "CentOS" "openSUSE" "Help" "Quit")
  select opt in "${options[@]}"; do
    case $opt in
      "Download")
        download ;;
      "Ubuntu")
        ubuntu_vm ;;
      "Debian")
        debian_vm ;;
      "Alpine")
        alpine_vm ;;
      "Fedora")
        fedora_vm ;;
      "CentOS")
        centos_vm ;;
      "openSUSE")
        opensuse_vm ;;
      "Help")
        help ;;
      "Quit")
        exit 0
        ;;
      *) echo "Invalid option, please try again." ;;
    esac
  done  
}

# Checking for virt-install and cloud-localds is install or not.
if [[ -e /usr/bin/virt-install && -e /usr/bin/cloud-localds ]]; then
  menu
else
echo "Virt-install or cloud-localds appears to be not install. Please install virt-install "
echo "or cloud-localds and try again. On Ubuntu, run apt install virtinst cloud-image-utils."
fi
