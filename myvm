#!/usr/bin/env bash

################################################################################
# myvm is a script designed to either create a quick VM or a custom VM from
# cloud VM images from Debian, Ubuntu, Centos, Fedora, and OpenSUSE.
# 
# Requirements:
# The script needs virt-install and cloud-localds packages to be installed.
# 
################################################################################
# Change Log:
# 2023/10/08 - Minor updates, removing settings from testing.
# 2023/12/29 - Removed test image download links.
# 2024/02/22 - Updated Fedora image link to Fedora 39.
#              Removed version numbers from comments for download links.
#              Updated renamed cloud image file names.
# 2024/03/02 - Added help section, updated cloud-init variable.
################################################################################

# Username and hashed password for VMs.
LV_CONN=""
USERNAME=''
# Use either openssl or mkpasswd to create a hashed password. e.g. openssl passwd -6 or mkpasswd -m sha-512.
PASSWORD=''
# SSH Public key
SSH_PUB_KEY=""
# Disk size for quick VMs.
QUICK_DISK_SIZE=10G
# Memory size for quick VMs.
QUICK_MEM_SIZE=2048
# Network used by quick VMs.
QUICK_NET="default"
# Network used by custom VMs.
CUSTOM_NET=""
# Libvirt VM images storage
LV_IMG='/var/lib/libvirt/images'
# Where the cloud-init config iso is stored.
LV_CLD-INIT_ISO='/var/lib/libvirt/cloud-init-iso'
# Where the Linux cloud images are stored.
LV_CLD_IMG="/var/lib/libvirt/cloud-images"
# Where the cloud-init config files are stored.
LV_CLD_INIT='/var/lib/libvirt/cloud-init'
# Ubuntu download link
UBUNTU_CLD_IMG='https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64.img'
# Debian download link
DEBIAN_CLD_IMG='https://cloud.debian.org/images/cloud/bookworm/latest/debian-12-generic-amd64.qcow2'
# Fedora download link
FEDORA_CLD_IMG='https://download.fedoraproject.org/pub/fedora/linux/releases/39/Cloud/x86_64/images/Fedora-Cloud-Base-39-1.5.x86_64.qcow2'
# CentOS Stream download link
CENTOS_CLD_IMG='https://cloud.centos.org/centos/9-stream/x86_64/images/CentOS-Stream-GenericCloud-9-latest.x86_64.qcow2'
# OpenSuse Leap download link
OPENSUSE_CLD_IMG="https://download.opensuse.org/repositories/Cloud:/Images:/Leap_15.3/images/openSUSE-Leap-15.3.x86_64-NoCloud.qcow2"
# Ubuntu File Name
UBUNTU_FNAME='ubuntu-cldimg.qcow2'
# Debian File Name
DEBIAN_FNAME='debian-cldimg.qcow2'
# Fedora File Name
FEDORA_FNAME='fedora-cldimg.qcow2'
# CentOS File Name
CENTOS_FNAME='centos-cldimg.qcow2'
# OpenSUSE File Name
OPENSUSE_FNAME="openSUSE-Leap-cldimg.qcow2"

d_ubuntu_img() {
    if [ -e $LV_CLD_IMG/$UBUNTU_FNAME ]; then
      echo "Found $(echo $UBUNTU_FNAME) in the libvirt images directory."
      # Return to main menu.
      menu
    else
      wget -O $LV_CLD_IMG/$UBUNTU_FNAME $UBUNTU_CLD_IMG
      # qemu-img convert -f qcow2 -O qcow2 $LV_IMG/$UBUNTU_FNAME_IMG $LV_IMG/$UBUNTU_FNAME
      echo "Downloading $(echo $UBUNTU_FNAME) into the libvirt images directory."
      # Return to main menu
      menu
    fi
}

d_debian_img() {
    if [ -e $LV_CLD_IMG/$DEBIAN_FNAME ]; then
      echo "Found $(echo $DEBIAN_FNAME) in the libvirt images directory."
      # Return to main menu.
      menu
    else
      wget -O $LV_CLD_IMG/$DEBIAN_FNAME $DEBIAN_CLD_IMG
      echo "Downloading $(echo $DEBIAN_FNAME) into the libvirt images directory."
      #Return to main menu.
      menu
    fi
}

d_fedora_img() {
    if [ -e $LV_CLD_IMG/$FEDORA_FNAME ]; then
      echo "Found $(echo $FEDORA_FNAME) in the libvirt images directory."
      # Return to main menu.
      menu
    else
      wget -O $LV_CLD_IMG/$FEDORA_FNAME $FEDORA_CLD_IMG
      echo "Downloading $(echo $FEDORA_FNAME) into the libvirt images directory."
      # Return to main menu
      menu
    fi
}

d_centos_img() {
    if [ -e $LV_CLD_IMG/$CENTOS_FNAME ]; then
      echo "Found $(echo $CENTOS_FNAME) in the libvirt images directory."
      # Return to main menu.
      menu
    else
      wget -O $LV_CLD_IMG/$CENTOS_FNAME $CENTOS_CLD_IMG
      echo "Downloading $(echo $CENTOS_FNAME) into the libvirt images directory."
      # Return to main menu
      menu
    fi
}

d_opensuse_img() {
    if [ -e $LV_CLD_IMG/$OPENSUSE_FNAME ]; then
      echo "Found $(echo $OPENSUSE_FNAME) in the libvirt images directory."
      # Return to main menu.
      menu
    else
      wget -O $LV_CLD_IMG/$OPENSUSE_FNAME $OPENSUSE_CLD_IMG
      echo "Downloading $(echo $OPENSUSE_FNAME) into the libvirt images directory."
      # Return to main menu
      menu
    fi
}

ubuntu_quick() {
  local vm_name=uvm-$(date +%y%m%d-%H%M)
  local os_disk=$vm_name

  # Create cloud-init directory.
  echo "Creating a cloud-init directory for $vm_name."
  mkdir $LV_CLD_INIT/$vm_name

  # Create user-data file.
  cat > $LV_CLD_INIT/$vm_name/cloud-init.cfg << EOF
#cloud-config
system_info:
  default_user:
    name: $USERNAME
    home: /home/$USERNAME
    ssh_authorized_keys:
      - $SSH_PUB_KEY

password: $PASSWORD
chpasswd: { expire: False }
hostname: $vm_name
ssh_pwauth: True
EOF

  # Creates the cloud-init.iso file.
  echo "Creating the cloud-init iso file."
  cloud-localds $LV_CLD-INIT_ISO/$vm_name.iso \
  $LV_CLD_INIT/$vm_name/cloud-init.cfg
  
  # Copy the cloud image and rename it to the VM name.
  echo "Copying $vm_name.qcow2 from cloud image file."
  cp $LV_CLD_IMG/$UBUNTU_FNAME $LV_IMG/$vm_name.qcow2
  
  # Resize cloud image disk.
  echo "Resizing VM disk space."
  qemu-img resize $LV_IMG/$vm_name.qcow2 $QUICK_DISK_SIZE
  
  # Run the virt-install command to create the new VM.
  virt-install \
    --connect qemu:///system \
    --name $vm_name \
    --memory $QUICK_MEM_SIZE \
    --vcpus=1 \
    --disk $LV_IMG/$vm_name.qcow2,device=disk,bus=virtio \
    --disk $LV_CLD-INIT_ISO/$vm_name.iso,device=cdrom \
    --os-variant=ubuntu-lts-latest \
    --virt-type kvm \
    --graphics vnc \
    --network network=$QUICK_NET,model=virtio \
    --import \
    --noautoconsole
  
  # Return user back to main menu
  menu
}

ubuntu_custom() {
    # Asking user for specific parameters for the custom VM.
  while :; do
    read -p "VM name? " u_vm_name
    if [ -e $LV_IMG/$u_vm_name.qcow2 ]; then
      echo "The VM name $u_vm_name already exists. Please choose a new name."
    else
      break
    fi
  done
  read -p "VM disk size (in GB)? " u_vm_disk_size
  read -p "How many vCPUs? " u_vcpus
  read -p "How much memory (in MB)? " u_memory
  
  # Create cloud-init directory.
  echo "Creating a cloud-init directory for $u_vm_name."
  mkdir $LV_CLD_INIT/$u_vm_name

  # Create user-data file.
  cat > $LV_CLD_INIT/$u_vm_name/cloud-init.cfg << EOF
#cloud-config
system_info:
  default_user:
    name: $USERNAME
    home: /home/$USERNAME
    ssh_authorized_keys:
      - $SSH_PUB_KEY

password: $PASSWORD
chpasswd: { expire: False }
hostname: $u_vm_name
ssh_pwauth: True
EOF

  # Creates the cloud-init.iso file.
  echo "Creating the cloud-init iso file."
  cloud-localds $LV_CLD-INIT_ISO/$u_vm_name.iso \
  $LV_CLD_INIT/$u_vm_name/cloud-init.cfg

  # Copy the cloud image and rename it to the VM name.
  echo "Copying $u_vm_name.qcow2 from cloud image file."
  cp $LV_CLD_IMG/$UBUNTU_FNAME $LV_IMG/$u_vm_name.qcow2
  
  # Resize VM disk size.
  echo "Resizing VM disk space to $u_vm_disk_size."
  qemu-img resize $LV_IMG/$u_vm_name.qcow2 $u_vm_disk_size

  # Run the virt-install command to create the new VM.
  virt-install \
    --connect qemu:///system \
    --name $u_vm_name \
    --memory $u_memory \
    --vcpus=$u_vcpus \
    --disk $LV_IMG/$u_vm_name.qcow2,device=disk,bus=virtio \
    --disk $LV_CLD-INIT_ISO/$u_vm_name.iso,device=cdrom \
    --os-variant=ubuntu-lts-latest \
    --virt-type kvm \
    --graphics vnc \
    --network network=$CUSTOM_NET,model=virtio \
    --import \
    --noautoconsole

  # Return user back to main menu
  menu
}

debian_quick() {
  local vm_name=debvm-$(date +%y%m%d-%H%M)
  local os_disk=$vm_name

  # Create Cloud-init directory.
  echo "Creating a cloud-init directory for $vm_name."
  mkdir $LV_CLD_INIT/$vm_name

  # Create the cloud-init.cfg file.
  echo "Creating the cloud-init iso file."
  cat > $LV_CLD_INIT/$vm_name/cloud-init.cfg << EOF
#cloud-config
system_info:
  default_user:
    name: $USERNAME
    home: /home/$USERNAME
    ssh_authorized_keys:
      - $SSH_PUB_KEY

password: $PASSWORD
chpasswd: { expire: False }
hostname: $vm_name
ssh_pwauth: True
EOF

# Creates the cloud-init.iso file.
  cloud-localds $LV_CLD-INIT_ISO/$vm_name.iso \
  $LV_CLD_INIT/$vm_name/cloud-init.cfg
  
  # Copy the cloud image and rename it to the VM name.
  echo "Copying $vm_name.qcow2 from cloud image file."
  cp $LV_CLD_IMG/$DEBIAN_FNAME $LV_IMG/$vm_name.qcow2
  
  # Resize cloud image disk.
  echo "Resizing VM disk space to $QUICK_DISK_SIZE."
  qemu-img resize $LV_IMG/$vm_name.qcow2 $QUICK_DISK_SIZE
  
  # Run the virt-install command to create the new VM.
  virt-install \
    --connect qemu:///system \
    --name $vm_name \
    --memory $QUICK_MEM_SIZE \
    --vcpus=1 \
    --disk $LV_IMG/$os_disk.qcow2,device=disk,bus=virtio \
    --disk $LV_CLD-INIT_ISO/$vm_name.iso,device=cdrom \
    --os-variant=debian12 \
    --virt-type kvm \
    --graphics vnc \
    --network network=$QUICK_NET,model=virtio \
    --import \
    --noautoconsole
  
  # Return user back to main menu
  menu
}
debian_custom() {
  # Asking user for specific parameters for the custom VM.
  while :; do
    read -p "VM name? " deb_vm_name
    if [ -e $LV_IMG/$deb_vm_name.qcow2 ]; then
      echo "The VM name $deb_vm_name already exists. Please choose a new name."
    else
      break
    fi
  done
  read -p "VM disk size (in GB)? " deb_vm_disk_size
  read -p "How many vCPUs? " deb_vcpus
  read -p "How much memory (in MB)? " deb_memory
 
  # Create cloud-init directory.
  echo "Creating a cloud-init directory for $deb_vm_name."
  mkdir $LV_CLD_INIT/$deb_vm_name

  # Create the cloud-init.cfg file.
  echo "Creating the cloud-init iso file."
  cat > $LV_CLD_INIT/$deb_vm_name/cloud-init.cfg << EOF
#cloud-config
system_info:
  default_user:
    name: $USERNAME
    home: /home/$USERNAME
    ssh_authorized_keys:
      - $SSH_PUB_KEY

password: $PASSWORD
chpasswd: { expire: False }
hostname: $deb_vm_name
ssh_pwauth: True
EOF

  # Creates the cloud-init.iso file.
  cloud-localds $LV_CLD-INIT_ISO/$deb_vm_name.iso \
  $LV_CLD_INIT/$deb_vm_name/cloud-init.cfg

  # Copy the cloud image and rename it to the VM name.
  echo "Copying $deb_vm_name.qcow2 from cloud image file."
  cp $LV_CLD_IMG/$DEBIAN_FNAME $LV_IMG/$deb_vm_name.qcow2
  
  # Resize VM disk size.
  echo "Resizing VM disk space to $deb_vm_disk_size."
  qemu-img resize $LV_IMG/$deb_vm_name.qcow2 $deb_vm_disk_size

  # Run the virt-install command to create the new VM.
  virt-install \
    --connect qemu:///system \
    --name $deb_vm_name \
    --memory $deb_memory \
    --vcpus=$deb_vcpus \
    --disk $LV_IMG/$deb_vm_name.qcow2,device=disk,bus=virtio \
    --disk $LV_CLD-INIT_ISO/$deb_vm_name.iso,device=cdrom \
    --os-variant=debian12 \
    --virt-type kvm \
    --graphics vnc \
    --network network=$CUSTOM_NET,model=virtio \
    --import \
    --noautoconsole
  # Return user back to main menu
  menu
}

fedora_quick() {
  local vm_name=fvm-$(date +%y%m%d-%H%M)
  local os_disk=$vm_name
  
  # Create cloud-init directory.
  echo "Creating a new directory for $vm_name."
  mkdir $LV_CLD_INIT/$vm_name
  
  # Create meta-data file.
  cat > $LV_CLD_INIT/$vm_name/meta-data.cfg << EOF
#cloud-config
local-hostname: $vm_name
EOF
  # Create user-data file.
  cat > $LV_CLD_INIT/$vm_name/cloud-init.cfg << EOF
#cloud-config
system_info:
  default_user:
    name: $USERNAME
    home: /home/$USERNAME
    ssh_authorized_keys:
      - $SSH_PUB_KEY

password: $PASSWORD
chpasswd: { expire: False }
ssh_pwauth: True
EOF

  # Creates the cloud-init.iso file.
  echo "Creating the cloud-init iso file."
  cloud-localds $LV_CLD-INIT_ISO/$vm_name.iso \
  $LV_CLD_INIT/$vm_name/cloud-init.cfg $LV_CLD_INIT/$vm_name/meta-data.cfg
  
  # Copy the cloud image and rename it to the VM name.
  echo "Copying $vm_name.qcow2 from cloud image file."
  cp $LV_CLD_IMG/$FEDORA_FNAME $LV_IMG/$vm_name.qcow2
  
  # Resize cloud image disk.
  echo "Resizing VM disk space."
  qemu-img resize $LV_IMG/$vm_name.qcow2 $QUICK_DISK_SIZE
  
  # Run the virt-install command to create the new VM.
  virt-install \
    --connect qemu:///system \
    --name $vm_name \
    --memory $QUICK_MEM_SIZE \
    --vcpus=1 \
    --disk $LV_IMG/$os_disk.qcow2,device=disk,bus=virtio \
    --disk $LV_CLD-INIT_ISO/$vm_name.iso,device=cdrom \
    --os-variant=fedora38 \
    --virt-type kvm \
    --graphics vnc \
    --network network=$QUICK_NET,model=virtio \
    --import \
    --noautoconsole

  # Return to main menu.
  menu
}

fedora_custom() {
  # Asking user for specific parameters for the custom VM.
  while :; do
    read -p "VM name? " f_vm_name
    if [ -e $LV_IMG/$f_vm_name.qcow2 ]; then
      echo "The VM name $f_vm_name already exists. Please choose a new name."
    else
      break
    fi
  done
  read -p "VM disk size (in GB)? " f_vm_disk_size
  read -p "How many vCPUs? " f_vcpus
  read -p "How much memory (in MB)? " f_memory

  # Create cloud-init directory.
  echo "Creating a cloud-init directory for $f_vm_name."
  mkdir $LV_CLD_INIT/$f_vm_name

  # Create meta-data file.
  cat > $LV_CLD_INIT/$f_vm_name/meta-data.cfg << EOF
#cloud-config
local-hostname: $f_vm_name
EOF
  # Create user-data file.
  cat > $LV_CLD_INIT/$f_vm_name/cloud-init.cfg << EOF
#cloud-config
system_info:
  default_user:
    name: $USERNAME
    home: /home/$USERNAME
    ssh_authorized_keys:
      - $SSH_PUB_KEY

password: $PASSWORD
chpasswd: { expire: False }
ssh_pwauth: True
EOF

  # Creates the cloud-init.iso file.
  echo "Creating the cloud-init iso file."
  cloud-localds $LV_CLD-INIT_ISO/$f_vm_name.iso \
  $LV_CLD_INIT/$f_vm_name/cloud-init.cfg $LV_CLD_INIT/$f_vm_name/meta-data.cfg

  # Copy the cloud image and rename it to the VM name.
  echo "Copying $f_vm_name.qcow2 from cloud image file."
  cp $LV_CLD_IMG/$FEDORA_FNAME $LV_IMG/$f_vm_name.qcow2
  
  # Resize VM disk size.
  echo "Resizing VM disk space to $f_vm_disk_size."
  qemu-img resize $LV_IMG/$f_vm_name.qcow2 $f_vm_disk_size

  # Run the virt-install command to create the new VM.
  virt-install \
    --connect qemu:///system \
    --name $f_vm_name \
    --memory $f_memory \
    --vcpus=$f_vcpus \
    --disk $LV_IMG/$f_vm_name.qcow2,device=disk,bus=virtio \
    --disk $LV_CLD-INIT_ISO/$f_vm_name.iso,device=cdrom \
    --os-variant=fedora38 \
    --virt-type kvm \
    --graphics vnc \
    --network network=$CUSTOM_NET,model=virtio \
    --import \
    --noautoconsole

  # Return user back to main menu
  menu
}

centos_quick() {
  local vm_name=cvm-$(date +%y%m%d-%H%M)
  local os_disk=$vm_name
  
  # Create cloud-init directory.
  echo "Creating a new directory for $vm_name."
  mkdir $LV_CLD_INIT/$vm_name
  
  # Create meta-data file.
  cat > $LV_CLD_INIT/$vm_name/meta-data.cfg << EOF
#cloud-config
local-hostname: $vm_name
EOF
  # Create user-data file
  cat > $LV_CLD_INIT/$vm_name/cloud-init.cfg << EOF
#cloud-config
system_info:
  default_user:
    name: $USERNAME
    home: /home/$USERNAME
    ssh_authorized_keys:
      - $SSH_PUB_KEY

password: $PASSWORD
chpasswd: { expire: False }
ssh_pwauth: True
EOF

  # Creates the cloud-init.iso file.
  echo "Creating the cloud-init iso file."
  cloud-localds $LV_CLD-INIT_ISO/$vm_name.iso \
  $LV_CLD_INIT/$vm_name/cloud-init.cfg $LV_CLD_INIT/$vm_name/meta-data.cfg 
  
  # Copy the cloud image and rename it to the VM name.
  echo "Copying $vm_name.qcow2 from cloud image file."
  cp $LV_CLD_IMG/$CENTOS_FNAME $LV_IMG/$vm_name.qcow2
  
  # Resize cloud image disk.
  echo "Resizing VM disk space."
  qemu-img resize $LV_IMG/$vm_name.qcow2 $QUICK_DISK_SIZE
  
  # Run the virt-install command to create the new VM.
  virt-install \
    --connect qemu:///system \
    --name $vm_name \
    --memory $QUICK_MEM_SIZE \
    --vcpus=1 \
    --disk $LV_IMG/$os_disk.qcow2,device=disk,bus=virtio \
    --disk $LV_CLD-INIT_ISO/$vm_name.iso,device=cdrom \
    --os-variant=centos-stream9 \
    --virt-type kvm \
    --graphics vnc \
    --network network=$QUICK_NET,model=virtio \
    --import \
    --noautoconsole
  
  # Return user back to main menu
  menu
}

centos_custom() {
  # Asking user for specific parameters for the custom VM.
  while :; do
    read -p "VM name? " c_vm_name
    if [ -e $LV_IMG/$c_vm_name.qcow2 ]; then
      echo "The VM name $c_vm_name already exists. Please choose a new name."
    else
      break
    fi
  done
  read -p "VM disk size (in GB)? " c_vm_disk_size
  read -p "How many vCPUs? " c_vcpus
  read -p "How much memory (in MB)? " c_memory

  # Create cloud-init directory.
  echo "Creating a cloud-init directory for $c_vm_name."
  mkdir $LV_CLD_INIT/$c_vm_name

  # Create meta-data file.
  cat > $LV_CLD_INIT/$c_vm_name/meta-data.cfg << EOF
#cloud-config
local-hostname: $c_vm_name
EOF
  # Create user-data file.
  cat > $LV_CLD_INIT/$c_vm_name/cloud-init.cfg << EOF
#cloud-config
system_info:
  default_user:
    name: $USERNAME
    home: /home/$USERNAME
    ssh_authorized_keys:
      - $SSH_PUB_KEY

password: $PASSWORD
chpasswd: { expire: False }
ssh_pwauth: True
EOF

  # Creates the cloud-init.iso file.
  echo "Creating the cloud-init iso file."
  cloud-localds $LV_CLD-INIT_ISO/$c_vm_name.iso \
  $LV_CLD_INIT/$c_vm_name/cloud-init.cfg $LV_CLD_INIT/$c_vm_name/meta-data.cfg

  # Copy the cloud image and rename it to the VM name.
  echo "Copying $c_vm_name.qcow2 from cloud image file."
  cp $LV_CLD_IMG/$CENTOS_FNAME $LV_IMG/$c_vm_name.qcow2
  
  # Resize VM disk size.
  echo "Resizing VM disk space to $c_vm_disk_size."
  qemu-img resize $LV_IMG/$c_vm_name.qcow2 $c_vm_disk_size

  # Run the virt-install command to create the new VM.
  virt-install \
    --connect qemu:///system \
    --name $c_vm_name \
    --memory $c_memory \
    --vcpus=$c_vcpus \
    --disk $LV_IMG/$c_vm_name.qcow2,device=disk,bus=virtio \
    --disk $LV_CLD-INIT_ISO/$c_vm_name.iso,device=cdrom \
    --os-variant=centos-stream9 \
    --virt-type kvm \
    --graphics vnc \
    --network network=$CUSTOM_NET,model=virtio \
    --import \
    --noautoconsole

  # Return user back to main menu
  menu
}

opensuse_quick() {
  local vm_name=ovm-$(date +%y%m%d-%H%M)
  local os_disk=$vm_name
  
  # Create cloud-init directory.
  echo "Creating a new directory for $vm_name."
  mkdir $LV_CLD_INIT/$vm_name
  
  # Create meta-data file.
  cat > $LV_CLD_INIT/$vm_name/meta-data.cfg << EOF
#cloud-config
local-hostname: $vm_name
EOF
  # Create user-data file
  cat > $LV_CLD_INIT/$vm_name/cloud-init.cfg << EOF
#cloud-config
system_info:
  default_user:
    name: $USERNAME
    home: /home/$USERNAME
    ssh_authorized_keys:
      - $SSH_PUB_KEY

password: $PASSWORD
chpasswd: { expire: False }
ssh_pwauth: True
EOF

  # Creates the cloud-init.iso file.
  echo "Creating the cloud-init iso file."
  cloud-localds $LV_CLD-INIT_ISO/$vm_name.iso \
  $LV_CLD_INIT/$vm_name/cloud-init.cfg $LV_CLD_INIT/$vm_name/meta-data.cfg 
  
  # Copy the cloud image and rename it to the VM name.
  echo "Copying $vm_name.qcow2 from cloud image file."
  cp $LV_CLD_IMG/$OPENSUSE_FNAME $LV_IMG/$vm_name.qcow2
  
  # Resize cloud image disk.
  echo "Resizing VM disk space."
  qemu-img resize $LV_IMG/$vm_name.qcow2 $QUICK_DISK_SIZE
  
  # Run the virt-install command to create the new VM.
  virt-install \
    --connect qemu:///system \
    --name $vm_name \
    --memory $QUICK_MEM_SIZE \
    --vcpus=1 \
    --disk $LV_IMG/$os_disk.qcow2,device=disk,bus=virtio \
    --disk $LV_CLD-INIT_ISO/$vm_name.iso,device=cdrom \
    --os-variant=opensuse15.4 \
    --virt-type kvm \
    --graphics vnc \
    --network network=$QUICK_NET,model=virtio \
    --import \
    --noautoconsole
  
  # Return user back to main menu
  menu
}

opensuse_custom() {
  # Asking user for specific parameters for the custom VM.
  while :; do
    read -p "VM name? " o_vm_name
    if [ -e $LV_IMG/$o_vm_name.qcow2 ]; then
      echo "The VM name $o_vm_name already exists. Please choose a new name."
    else
      break
    fi
  done
  read -p "VM disk size (in GB)? " o_vm_disk_size
  read -p "How many vCPUs? " o_vcpus
  read -p "How much memory (in MB)? " o_memory

  # Create cloud-init directory.
  echo "Creating a cloud-init directory for $o_vm_name."
  mkdir $LV_CLD_INIT/$o_vm_name

  # Create meta-data file.
  cat > $LV_CLD_INIT/$o_vm_name/meta-data.cfg << EOF
#cloud-config
local-hostname: $o_vm_name
EOF
  # Create user-data file.
  cat > $LV_CLD_INIT/$o_vm_name/cloud-init.cfg << EOF
#cloud-config
system_info:
  default_user:
    name: $USERNAME
    home: /home/$USERNAME
    ssh_authorized_keys:
      - $SSH_PUB_KEY

password: $PASSWORD
chpasswd: { expire: False }
ssh_pwauth: True
EOF

  # Creates the cloud-init.iso file.
  echo "Creating the cloud-init iso file."
  cloud-localds $LV_CLD-INIT_ISO/$o_vm_name.iso \
  $LV_CLD_INIT/$o_vm_name/cloud-init.cfg $LV_CLD_INIT/$o_vm_name/meta-data.cfg

  # Copy the cloud image and rename it to the VM name.
  echo "Copying $o_vm_name.qcow2 from cloud image file."
  cp $LV_CLD_IMG/$OPENSUSE_FNAME $LV_IMG/$o_vm_name.qcow2
  
  # Resize VM disk size.
  echo "Resizing VM disk space to $o_vm_disk_size."
  qemu-img resize $LV_IMG/$o_vm_name.qcow2 $o_vm_disk_size

  # Run the virt-install command to create the new VM.
  virt-install \
    --connect qemu:///system \
    --name $o_vm_name \
    --memory $o_memory \
    --vcpus=$c_vcpus \
    --disk $LV_IMG/$o_vm_name.qcow2,device=disk,bus=virtio \
    --disk $LV_CLD-INIT_ISO/$o_vm_name.iso,device=cdrom \
    --os-variant=opensuse15.4 \
    --virt-type kvm \
    --graphics vnc \
    --network network=$CUSTOM_NET,model=virtio \
    --import \
    --noautoconsole


  # Return user back to main menu
  menu
}

sub_download() {
  echo " ==Download Options== "
  echo 
  echo " The cloud image needs to be downloaded before a VM "
  echo " can be created. Please download the cloud image    "
  echo " for either Debian, Ubuntu, Fedora or download all  "
  echo " of the cloud images from each distro.              "
  echo
  local PS3="Please select an option: "
  local options=("Debian" "Ubuntu" "Fedora" "CentOS" "openSUSE" "Main Menu")
  local opt
  select opt in "${options[@]}"; do
    case $opt in
      "Debian")
        d_debian_img ;;
      "Ubuntu")
        d_ubuntu_img ;;
      "Fedora")
        d_fedora_img ;;
      "CentOS")
        d_centos_img ;;
      "openSUSE")
        d_opensuse_img
        ;;
      "Main Menu")
       echo "Return to main menu"
       menu
       ;;
      *) echo "Invalid option, please try again." ;;
    esac
  done
}

sub_debian() {
  echo " ==Debian Options=="
  echo
  echo " The quick option creates a VM with predefined" 
  echo " variables."
  echo
  echo " The custom option creates a VM with user specified"
  echo " options."
  echo
  local PS3="Please select an option below: "
  local options=("Quick" "Custom" "Main Menu")
  local opt
  select opt in "${options[@]}"; do
    case $opt in
      "Quick")
        debian_quick ;;
      "Custom")
        debian_custom ;;
      "Main Menu")
       echo "Return to main menu"
       menu
       ;;
      *) echo "Invalid option, please try again." ;;
    esac
  done
}

sub_ubuntu() {
  echo " ==Ubuntu Options== "
  echo
  echo " The quick option creates a VM with predefined" 
  echo " variables."
  echo
  echo " The custom option creates a VM with user specified"
  echo " options."
  echo
  local PS3="Please select an option: "
  local options=("Quick" "Custom" "Main Menu")
  local opt
  select opt in "${options[@]}"; do
    case $opt in
      "Quick")
        ubuntu_quick ;;
      "Custom")
        ubuntu_custom ;;
      "Main Menu")
       echo "Return to main menu"
       menu
       ;;
      *) echo "Invalid option, please try again." ;;
    esac
  done
}

sub_fedora() {
  echo " ==Fedora Options=="
  echo 
  echo " The quick option creates a VM with predefined" 
  echo " variables."
  echo
  echo " The custom option creates a VM with user specified"
  echo " options."
  echo
  local PS3="Please select an option below: "
  local options=("Quick" "Custom" "Main Menu")
  local opt
  select opt in "${options[@]}"; do
    case $opt in
      "Quick")
        fedora_quick ;;
      "Custom")
        fedora_custom ;;
      "Main Menu")
       echo "Return to main menu"
       menu
       ;;
      *) echo "Invalid option, please try again." ;;
    esac
  done
}

sub_centos() {
  echo " ==CentOS Options=="
  echo
  echo " The quick option creates a VM with predefined" 
  echo " variables."
  echo
  echo " The custom option creates a VM with user specified"
  echo " options."
  echo
  local PS3="Please select an option below: "
  local options=("Quick" "Custom" "Main Menu")
  local opt
  select opt in "${options[@]}"; do
    case $opt in
      "Quick")
        centos_quick ;;
      "Custom")
        centos_custom ;;
      "Main Menu")
       echo "Return to main menu"
       menu
       ;;
      *) echo "Invalid option, please try again." ;;
    esac
  done
}
sub_opensuse() {
  echo " ==openSUSE Options=="
  echo
  echo " The quick option creates a VM with predefined" 
  echo " variables."
  echo
  echo " The custom option creates a VM with user specified"
  echo " options."
  echo
  local PS3="Please select an option below: "
  local options=("Quick" "Custom" "Main Menu")
  local opt
  select opt in "${options[@]}"; do
    case $opt in
      "Quick")
        opensuse_quick ;;
      "Custom")
        opensuse_custom ;;
      "Main Menu")
       echo "Return to main menu"
       menu
       ;;
      *) echo "Invalid option, please try again." ;;
    esac
  done
}

help() {

echo "myvm uses Linux cloud images to create VMs with. "

echo "The setup: "
echo "1) Install virt-install and cloud-localds. Please refer to your distro package manager for the specific package name"
echo "2) Create the directories - There are four variables LV_CLD_INIT, LV_CLD_IMG, "
echo "   LV_CLD-INIT_ISO and LV_IMG which store cloud-init files, cloud images, isos, and the VM qcow2 files. "
echo "   - LV_IMG - The directory Stores the VM qcow2 files. "
echo "   - LV_CLD_INIT - This directory stores the cloud-init files. "
echo "   - LV_CLD_IMG - This directory stores the download Linux cloud images. "
echo "   - LV_CLD-INIT_ISO - This directory stores the cloud-init iso made by cloud-localds. "
echo "3) Provide the username and password in the USERNAME and PASSWORD variable. Use commands like mkpasswd or openssl to "
echo "   create a hashed password. "
echo "4) Generate a ssh-key pair and put the pubkey inside of the SSH_PUB_KEY variable. "
echo "5) Networking - in the CUSTOM_NET and QUICK_NET - set the name of the net device the VM will use. "
echo "6) For the QUICK_DISK_SIZE and QUICK_MEM_SIZE variable, set the desired sizes for both varaibles. "
}

menu() {
  echo
  echo " The myvm bash script is able to download cloud images from "
  echo " Debian, Fedora, and Ubuntu, utilizing Cloud-init to provide "
  echo " hostname, username, password, etc... to the VM. "
  echo
  echo " Please select an option below to get started "
  echo 
  PS3='Select an option: '
  options=("Download" "Ubuntu" "Debian" "Fedora" "CentOS" "openSUSE" "Help" "Quit")
  select opt in "${options[@]}"; do
    case $opt in
      "Download")
        sub_download ;;
      "Ubuntu")
        sub_ubuntu ;;
      "Debian")
        sub_debian ;;
      "Fedora")
        sub_fedora ;;
      "CentOS")
        sub_centos ;;
      "openSUSE")
        sub_opensuse ;;
      "Help")
        help ;;
      "Quit")
        echo "Exiting"
        exit 0
        ;;
      *) echo "Invalid option, please try again." ;;
    esac
  done  
}

# Checking for virt-install and cloud-localds is install or not.
if [[ -e /usr/bin/virt-install && -e /usr/bin/cloud-localds ]]; then
  menu
else
echo "Virt-install or cloud-localds appears to be not install. Please install virt-install "
echo "or cloud-localds and try again."
fi